#!/bin/bash

# Lynx ÌîÑÎ†àÏûÑÏõåÌÅ¨ ÏÑ§Ï†ï Ïä§ÌÅ¨Î¶ΩÌä∏

echo "ü¶ã Lynx ÌîÑÎ†àÏûÑÏõåÌÅ¨ ÏÑ§Ï†ïÏùÑ ÏãúÏûëÌï©ÎãàÎã§..."

# ÌòÑÏû¨ ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_ROOT"

# ÌôòÍ≤Ω Î≥ÄÏàò Î°úÎìú
if [ -f .env ]; then
    source .env
fi

# Lynx ÏÜåÏä§ ÌÅ¥Î°†
if [ ! -d "src/lynx" ]; then
    echo "üì• Lynx ÌîÑÎ†àÏûÑÏõåÌÅ¨Î•º Îã§Ïö¥Î°úÎìúÌï©ÎãàÎã§..."
    mkdir -p src
    git clone https://github.com/lynx-family/lynx.git src/lynx
else
    echo "‚úÖ Lynx ÌîÑÎ†àÏûÑÏõåÌÅ¨Í∞Ä Ïù¥ÎØ∏ ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏäµÎãàÎã§."
fi

# Lynx ÌôòÍ≤Ω ÏÑ§Ï†ï
echo "üîß Lynx Í∞úÎ∞ú ÌôòÍ≤ΩÏùÑ ÏÑ§Ï†ïÌï©ÎãàÎã§..."
cd src/lynx

# Python ÌôòÍ≤Ω ÏÑ§Ï†ï
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3Í∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§. Python 3.9 Ïù¥ÏÉÅÏùÑ ÏÑ§ÏπòÌïòÏÑ∏Ïöî."
    exit 1
fi

# Python Í∞ÄÏÉÅÌôòÍ≤Ω ÏÉùÏÑ±
if [ ! -d "venv" ]; then
    echo "üêç Python Í∞ÄÏÉÅÌôòÍ≤ΩÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§..."
    python3 -m venv venv
fi

# Í∞ÄÏÉÅÌôòÍ≤Ω ÌôúÏÑ±Ìôî
source venv/bin/activate

# PyYAML ÏÑ§Ïπò
echo "üì¶ Python ÏùòÏ°¥ÏÑ±ÏùÑ ÏÑ§ÏπòÌï©ÎãàÎã§..."
pip3 install pyyaml

# Lynx ÌôòÍ≤Ω ÏÑ§Ï†ï
echo "üîß Lynx ÎπåÎìú ÌôòÍ≤ΩÏùÑ ÏÑ§Ï†ïÌï©ÎãàÎã§..."
source tools/envsetup.sh

# ÏùòÏ°¥ÏÑ± ÎèôÍ∏∞Ìôî
echo "üîÑ Lynx ÏùòÏ°¥ÏÑ±ÏùÑ ÎèôÍ∏∞ÌôîÌï©ÎãàÎã§..."
tools/hab sync .

# Android ÏÑ§Ï†ï (Android ÎπåÎìúÍ∞Ä ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞)
if [ "$ENABLE_ANDROID" = "true" ]; then
    echo "ü§ñ Android Í∞úÎ∞ú ÌôòÍ≤ΩÏùÑ ÏÑ§Ï†ïÌï©ÎãàÎã§..."
    
    # ANDROID_HOME Ï≤¥ÌÅ¨
    if [ -z "$ANDROID_HOME" ]; then
        echo "‚ö†Ô∏è  ANDROID_HOME ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º ÏÑ§Ï†ïÌïòÏÑ∏Ïöî."
        echo "Ïòà: export ANDROID_HOME=/path/to/android-sdk"
    else
        export ANDROID_SDK_ROOT="$ANDROID_HOME"
        export PATH=${PATH}:${ANDROID_HOME}/platform-tools
        echo "‚úÖ Android SDK Í≤ΩÎ°úÍ∞Ä ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§: $ANDROID_HOME"
    fi
    
    # JDK ÏÑ§Ï†ï Ï≤¥ÌÅ¨
    if [ -z "$JAVA_HOME" ]; then
        echo "‚ö†Ô∏è  JAVA_HOME ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º ÏÑ§Ï†ïÌïòÏÑ∏Ïöî."
        if [[ "$OSTYPE" == "darwin"* ]]; then
            echo "macOS ÏòàÏãú: export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home"
        fi
    else
        export PATH=$JAVA_HOME/bin:$PATH
        echo "‚úÖ JDK Í≤ΩÎ°úÍ∞Ä ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§: $JAVA_HOME"
    fi
fi

# iOS ÏÑ§Ï†ï (iOS ÎπåÎìúÍ∞Ä ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞)
if [ "$ENABLE_IOS" = "true" ]; then
    echo "üçé iOS Í∞úÎ∞ú ÌôòÍ≤ΩÏùÑ ÏÑ§Ï†ïÌï©ÎãàÎã§..."
    
    # Xcode Command Line Tools Ï≤¥ÌÅ¨
    if ! xcode-select -p &> /dev/null; then
        echo "‚ö†Ô∏è  Xcode Command Line ToolsÍ∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§."
        echo "Îã§Ïùå Î™ÖÎ†πÏñ¥Î°ú ÏÑ§ÏπòÌïòÏÑ∏Ïöî: xcode-select --install"
    else
        echo "‚úÖ Xcode Command Line ToolsÍ∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏäµÎãàÎã§."
    fi
fi

# Appium ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω ÏÑ§Ï†ï (ÌÖåÏä§Ìä∏Í∞Ä ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞)
if [ "$AUTO_RUN_TESTS" = "true" ]; then
    echo "üß™ Appium ÌÖåÏä§Ìä∏ ÌôòÍ≤ΩÏùÑ ÏÑ§Ï†ïÌï©ÎãàÎã§..."
    
    # Node.js Ï≤¥ÌÅ¨
    if ! command -v node &> /dev/null; then
        echo "‚ùå Node.jsÍ∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§."
        exit 1
    fi
    
    # Appium ÏÑ§Ïπò
    if ! command -v appium &> /dev/null; then
        echo "üì± AppiumÏùÑ ÏÑ§ÏπòÌï©ÎãàÎã§..."
        npm install -g appium@2.11.2
        npm install -g appium-doctor
    fi
    
    # Appium ÎìúÎùºÏù¥Î≤Ñ ÏÑ§Ïπò
    echo "üì± Appium ÎìúÎùºÏù¥Î≤ÑÎ•º ÏÑ§ÏπòÌï©ÎãàÎã§..."
    if [ "$ENABLE_IOS" = "true" ]; then
        appium driver install xcuitest
    fi
    if [ "$ENABLE_ANDROID" = "true" ]; then
        appium driver install uiautomator2
        appium driver install espresso
    fi
    
    # Appium ÌôòÍ≤Ω Ï≤¥ÌÅ¨
    echo "üîç Appium ÌôòÍ≤ΩÏùÑ Ï≤¥ÌÅ¨Ìï©ÎãàÎã§..."
    appium-doctor
fi

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏Î°ú ÎèåÏïÑÍ∞ÄÍ∏∞
cd "$PROJECT_ROOT"

# Lynx Ïï± ÎîîÎ†âÌÜ†Î¶¨ Ï¥àÍ∏∞Ìôî
echo "üìÅ Lynx Ïï± Íµ¨Ï°∞Î•º Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§..."

# Í∏∞Î≥∏ Ïª¥Ìè¨ÎÑåÌä∏ ÏÉùÏÑ±
if [ ! -f "app/components/Button.js" ]; then
    cat > app/components/Button.js << 'EOF'
/**
 * Lynx Button Ïª¥Ìè¨ÎÑåÌä∏
 */
export default class Button {
    constructor(props = {}) {
        this.props = props;
        this.element = null;
    }
    
    render() {
        const { text = 'Î≤ÑÌäº', onClick, className = '' } = this.props;
        
        this.element = document.createElement('button');
        this.element.textContent = text;
        this.element.className = `lynx-button ${className}`;
        
        if (onClick) {
            this.element.addEventListener('click', onClick);
        }
        
        return this.element;
    }
    
    setData(data) {
        if (this.element && data.text) {
            this.element.textContent = data.text;
        }
    }
}
EOF
    echo "‚úÖ Í∏∞Î≥∏ Button Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§."
fi

# Í∏∞Î≥∏ ÌéòÏù¥ÏßÄ ÏÉùÏÑ±
if [ ! -f "app/pages/Home.js" ]; then
    cat > app/pages/Home.js << 'EOF'
import Button from '../components/Button.js';

/**
 * Lynx Home ÌéòÏù¥ÏßÄ
 */
export default class Home {
    constructor() {
        this.container = null;
        this.components = {};
    }
    
    render() {
        this.container = document.createElement('div');
        this.container.className = 'lynx-page home-page';
        
        // Ï†úÎ™©
        const title = document.createElement('h1');
        title.textContent = 'App Forge';
        title.className = 'page-title';
        this.container.appendChild(title);
        
        // ÏÑ§Î™Ö
        const description = document.createElement('p');
        description.textContent = 'Lynx Í∏∞Î∞ò Î™®Î∞îÏùº Ïï± Í∞úÎ∞ú ÏûêÎèôÌôî ÏãúÏä§ÌÖú';
        description.className = 'page-description';
        this.container.appendChild(description);
        
        // Î≤ÑÌäº
        this.components.button = new Button({
            text: 'ÏãúÏûëÌïòÍ∏∞',
            onClick: () => {
                console.log('ÏãúÏûëÌïòÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠Îê®');
            },
            className: 'start-button'
        });
        
        this.container.appendChild(this.components.button.render());
        
        return this.container;
    }
}
EOF
    echo "‚úÖ Í∏∞Î≥∏ Home ÌéòÏù¥ÏßÄÍ∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§."
fi

# Í∏∞Î≥∏ Ïï± ÏÑ§Ï†ï ÌååÏùº ÏÉùÏÑ±
if [ ! -f "app/config/app.config.js" ]; then
    cat > app/config/app.config.js << 'EOF'
/**
 * App Forge Lynx Ïï± ÏÑ§Ï†ï
 */
export default {
    name: 'App Forge',
    version: '1.0.0',
    description: 'Lynx Í∏∞Î∞ò Î™®Î∞îÏùº Ïï± Í∞úÎ∞ú ÏûêÎèôÌôî ÏãúÏä§ÌÖú',
    
    // ÏßÄÏõê ÌîåÎû´Ìèº
    platforms: {
        web: true,
        ios: process.env.ENABLE_IOS === 'true',
        android: process.env.ENABLE_ANDROID === 'true'
    },
    
    // Supabase ÏÑ§Ï†ï
    supabase: {
        url: process.env.SUPABASE_URL,
        anonKey: process.env.SUPABASE_ANON_KEY
    },
    
    // Í∞úÎ∞ú ÏÑ§Ï†ï
    development: {
        hotReload: true,
        devTools: true,
        mock: true
    },
    
    // ÌÖåÏä§Ìä∏ ÏÑ§Ï†ï
    testing: {
        autoRun: process.env.AUTO_RUN_TESTS === 'true',
        e2eUrl: process.env.E2E_TEST_URL || 'http://localhost:3000'
    }
};
EOF
    echo "‚úÖ Ïï± ÏÑ§Ï†ï ÌååÏùºÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§."
fi

# Î©îÏù∏ Ïï± ÌååÏùº ÏÉùÏÑ±
if [ ! -f "app/main.js" ]; then
    cat > app/main.js << 'EOF'
import Home from './pages/Home.js';
import config from './config/app.config.js';

/**
 * App Forge Î©îÏù∏ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò
 */
class AppForgeApp {
    constructor() {
        this.currentPage = null;
        this.config = config;
        this.container = null;
    }
    
    async init() {
        console.log(`${this.config.name} v${this.config.version} ÏãúÏûë`);
        
        // Ïï± Ïª®ÌÖåÏù¥ÎÑà ÏÉùÏÑ±
        this.container = document.getElementById('app') || document.body;
        
        // Ìôà ÌéòÏù¥ÏßÄ Î°úÎìú
        await this.navigateTo('home');
        
        console.log('Ïï± Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }
    
    async navigateTo(page) {
        // Ïù¥Ï†Ñ ÌéòÏù¥ÏßÄ Ï†úÍ±∞
        if (this.currentPage && this.currentPage.container) {
            this.container.removeChild(this.currentPage.container);
        }
        
        // ÏÉà ÌéòÏù¥ÏßÄ Î°úÎìú
        switch (page) {
            case 'home':
                this.currentPage = new Home();
                break;
            default:
                console.error(`Ïïå Ïàò ÏóÜÎäî ÌéòÏù¥ÏßÄ: ${page}`);
                return;
        }
        
        // ÌéòÏù¥ÏßÄ Î†åÎçîÎßÅ
        const pageElement = this.currentPage.render();
        this.container.appendChild(pageElement);
    }
}

// Ïï± ÏãúÏûë
const app = new AppForgeApp();

// DOM Î°úÎìú ÏôÑÎ£å ÌõÑ Ïï± Ï¥àÍ∏∞Ìôî
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => app.init());
} else {
    app.init();
}

export default app;
EOF
    echo "‚úÖ Î©îÏù∏ Ïï± ÌååÏùºÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§."
fi

# HTML ÏóîÌä∏Î¶¨ Ìè¨Ïù∏Ìä∏ ÏÉùÏÑ±
if [ ! -f "app/index.html" ]; then
    cat > app/index.html << 'EOF'
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>App Forge - Lynx Í∏∞Î∞ò Î™®Î∞îÏùº Ïï±</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        #app {
            background: white;
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 400px;
            width: 90%;
        }
        
        .page-title {
            color: #333;
            margin-bottom: 1rem;
            font-size: 2rem;
            font-weight: 600;
        }
        
        .page-description {
            color: #666;
            margin-bottom: 2rem;
            line-height: 1.6;
        }
        
        .lynx-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .lynx-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }
        
        .lynx-button:active {
            transform: translateY(0);
        }
    </style>
</head>
<body>
    <div id="app">
        <div style="color: #999;">Ïï± Î°úÎî© Ï§ë...</div>
    </div>
    
    <script type="module" src="main.js"></script>
</body>
</html>
EOF
    echo "‚úÖ HTML ÏóîÌä∏Î¶¨ Ìè¨Ïù∏Ìä∏Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§."
fi

# .gitignore ÏóÖÎç∞Ïù¥Ìä∏
if [ -f ".gitignore" ]; then
    echo "" >> .gitignore
    echo "# Lynx specific" >> .gitignore
    echo "src/lynx/venv/" >> .gitignore
    echo "src/lynx/out/" >> .gitignore
    echo "src/lynx/build/" >> .gitignore
    echo "platforms/*/build/" >> .gitignore
    echo "platforms/*/out/" >> .gitignore
else
    cat > .gitignore << 'EOF'
# Dependencies
node_modules/
npm-debug.log*

# Environment
.env
.env.local

# Lynx specific
src/lynx/venv/
src/lynx/out/
src/lynx/build/
platforms/*/build/
platforms/*/out/

# Build outputs
dist/
build/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
logs/
*.log
EOF
fi

echo "‚úÖ Lynx ÌîÑÎ†àÏûÑÏõåÌÅ¨ ÏÑ§Ï†ïÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!"
echo ""
echo "üìã Îã§Ïùå Îã®Í≥Ñ:"
echo "1. .env ÌååÏùºÏóêÏÑú ÌîåÎû´Ìèº ÏÑ§Ï†ï (ENABLE_IOS, ENABLE_ANDROID)"
echo "2. npm run dev:lynx Î°ú Í∞úÎ∞ú ÏÑúÎ≤Ñ ÏãúÏûë"
echo "3. npm run build:all Î°ú Î™®Îì† ÌîåÎû´Ìèº ÎπåÎìú"
echo ""
echo "üöÄ Lynx Ïï± Í∞úÎ∞úÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî!"