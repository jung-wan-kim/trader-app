name: Release Management

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Auto-increment version based on release type
            CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            CURRENT_VERSION=${CURRENT_VERSION#v}
            
            IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            case "${{ github.event.inputs.release_type }}" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi
      
      - name: Update version in pubspec.yaml
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BUILD_NUMBER=$(date +%s)
          sed -i "s/version: .*/version: $VERSION+$BUILD_NUMBER/" pubspec.yaml
      
      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml
          git commit -m "Bump version to ${{ steps.version.outputs.version }}"
      
      - name: Create tag
        run: |
          git tag "v${{ steps.version.outputs.version }}"
      
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tags: true

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version-tag: "v${{ needs.create-release.outputs.version }}"
          skip-commit: true
          output-file: false
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ needs.create-release.outputs.version }}"
          name: "Release v${{ needs.create-release.outputs.version }}"
          body: ${{ steps.changelog.outputs.clean_changelog }}
          draft: false
          prerelease: false

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [create-release, generate-changelog]
    if: always()
    steps:
      - name: Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Release v${{ needs.create-release.outputs.version }} has been created!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Release Created* :rocket:\n*Version:* v${{ needs.create-release.outputs.version }}\n*Branch:* ${{ github.ref_name }}\n*Status:* ${{ job.status }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}