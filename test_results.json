{"protocolVersion":"0.1.1","runnerVersion":null,"pid":49306,"type":"start","time":0}
{"suite":{"id":0,"platform":"vm","path":"/Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"suite","time":0}
{"test":{"id":1,"name":"loading /Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart","suiteID":0,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":0}
{"suite":{"id":2,"platform":"vm","path":"/Users/jung-wankim/Project/trader-app/test/unit/models/user_subscription_test.dart"},"type":"suite","time":3}
{"test":{"id":3,"name":"loading /Users/jung-wankim/Project/trader-app/test/unit/models/user_subscription_test.dart","suiteID":2,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":3}
{"suite":{"id":4,"platform":"vm","path":"/Users/jung-wankim/Project/trader-app/test/unit/models/video_model_test.dart"},"type":"suite","time":3}
{"test":{"id":5,"name":"loading /Users/jung-wankim/Project/trader-app/test/unit/models/video_model_test.dart","suiteID":4,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":3}
{"suite":{"id":6,"platform":"vm","path":"/Users/jung-wankim/Project/trader-app/test/unit/models/stock_recommendation_test.dart"},"type":"suite","time":3}
{"test":{"id":7,"name":"loading /Users/jung-wankim/Project/trader-app/test/unit/models/stock_recommendation_test.dart","suiteID":6,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":3}
{"count":4,"time":4,"type":"allSuites"}
test/unit/models/user_subscription_test.dart:335:61: Error: The argument type 'String?' can't be assigned to the parameter type 'String' because 'String?' is nullable and 'String' isn't.
        expect(paymentMethod.expiryDate, DateTime.parse(json['expiryDate']));
                                                            ^
test/unit/models/user_subscription_test.dart:407:54: Error: The argument type 'Object?' can't be assigned to the parameter type 'String'.
 - 'Object' is from 'dart:core'.
        expect(history.timestamp, DateTime.parse(json['timestamp']));
                                                     ^
{"testID":3,"error":"Failed to load \"/Users/jung-wankim/Project/trader-app/test/unit/models/user_subscription_test.dart\":\nCompilation failed for testPath=/Users/jung-wankim/Project/trader-app/test/unit/models/user_subscription_test.dart: test/unit/models/user_subscription_test.dart:335:61: Error: The argument type 'String?' can't be assigned to the parameter type 'String' because 'String?' is nullable and 'String' isn't.\n        expect(paymentMethod.expiryDate, DateTime.parse(json['expiryDate']));\n                                                            ^\ntest/unit/models/user_subscription_test.dart:407:54: Error: The argument type 'Object?' can't be assigned to the parameter type 'String'.\n - 'Object' is from 'dart:core'.\n        expect(history.timestamp, DateTime.parse(json['timestamp']));\n                                                     ^\n.","stackTrace":"","isFailure":false,"type":"error","time":1438}
{"testID":3,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":1439}
{"testID":1,"error":"Error: the Dart compiler exited unexpectedly.","stackTrace":"package:flutter_tools/src/base/common.dart 34:3  throwToolExit\npackage:flutter_tools/src/compile.dart 907:11    DefaultResidentCompiler._compile.<fn>\ndart:async/zone.dart 1538:47                     _rootRunUnary\ndart:async/zone.dart 1429:19                     _CustomZone.runUnary\ndart:async/future_impl.dart 951:45               Future._propagateToListeners.handleValueCallback\ndart:async/future_impl.dart 980:13               Future._propagateToListeners\ndart:async/future_impl.dart 865:9                Future._propagateToListeners\ndart:async/future_impl.dart 723:5                Future._completeWithValue\ndart:async/future_impl.dart 807:7                Future._asyncCompleteWithValue.<fn>\ndart:async/zone.dart 1525:13                     _rootRun\ndart:async/zone.dart 1422:19                     _CustomZone.run\ndart:async/zone.dart 1321:7                      _CustomZone.runGuarded\ndart:async/zone.dart 1362:23                     _CustomZone.bindCallbackGuarded.<fn>\ndart:async/schedule_microtask.dart 40:21         _microtaskLoop\ndart:async/schedule_microtask.dart 49:5          _startMicrotaskLoop\ndart:isolate-patch/isolate_patch.dart 127:13     _runPendingImmediateCallback\ndart:isolate-patch/isolate_patch.dart 194:5      _RawReceivePort._handleMessage\n","isFailure":false,"type":"error","time":1450}
{"testID":1,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":1714}
{"group":{"id":8,"suiteID":0,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":32,"line":null,"column":null,"url":null},"type":"group","time":1716}
{"group":{"id":9,"suiteID":0,"parentID":8,"name":"TraderStrategy Model Tests","metadata":{"skip":false,"skipReason":null},"testCount":32,"line":6,"column":3,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"group","time":1716}
{"group":{"id":10,"suiteID":0,"parentID":9,"name":"TraderStrategy Model Tests Constructor","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":15,"column":5,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"group","time":1716}
{"test":{"id":11,"name":"TraderStrategy Model Tests Constructor should create instance with all required fields","suiteID":0,"groupIDs":[8,9,10],"metadata":{"skip":false,"skipReason":null},"line":16,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1716}
{"testID":11,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1734}
{"test":{"id":12,"name":"TraderStrategy Model Tests Constructor should handle optional profileImageUrl","suiteID":0,"groupIDs":[8,9,10],"metadata":{"skip":false,"skipReason":null},"line":30,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1734}
{"testID":12,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1736}
{"group":{"id":13,"suiteID":0,"parentID":9,"name":"TraderStrategy Model Tests Computed Properties","metadata":{"skip":false,"skipReason":null},"testCount":6,"line":61,"column":5,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"group","time":1736}
{"test":{"id":14,"name":"TraderStrategy Model Tests Computed Properties lossRate should calculate correctly","suiteID":0,"groupIDs":[8,9,13],"metadata":{"skip":false,"skipReason":null},"line":62,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1736}
{"testID":14,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1737}
{"test":{"id":15,"name":"TraderStrategy Model Tests Computed Properties lossRate should handle edge cases","suiteID":0,"groupIDs":[8,9,13],"metadata":{"skip":false,"skipReason":null},"line":67,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1737}
{"testID":15,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1739}
{"test":{"id":16,"name":"TraderStrategy Model Tests Computed Properties profitFactor should calculate correctly with positive returns","suiteID":0,"groupIDs":[8,9,13],"metadata":{"skip":false,"skipReason":null},"line":75,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1739}
{"testID":16,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1741}
{"test":{"id":17,"name":"TraderStrategy Model Tests Computed Properties profitFactor should handle negative average returns","suiteID":0,"groupIDs":[8,9,13],"metadata":{"skip":false,"skipReason":null},"line":81,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1741}
{"testID":17,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1743}
{"test":{"id":18,"name":"TraderStrategy Model Tests Computed Properties profitFactor should return 0 when no winning or losing trades","suiteID":0,"groupIDs":[8,9,13],"metadata":{"skip":false,"skipReason":null},"line":111,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1743}
{"testID":18,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1745}
{"test":{"id":19,"name":"TraderStrategy Model Tests Computed Properties profitFactor should return 0 when no losing trades","suiteID":0,"groupIDs":[8,9,13],"metadata":{"skip":false,"skipReason":null},"line":141,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1745}
{"testID":19,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1746}
{"group":{"id":20,"suiteID":0,"parentID":9,"name":"TraderStrategy Model Tests JSON Serialization","metadata":{"skip":false,"skipReason":null},"testCount":8,"line":172,"column":5,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"group","time":1746}
{"test":{"id":21,"name":"TraderStrategy Model Tests JSON Serialization fromJson should create correct instance from valid JSON","suiteID":0,"groupIDs":[8,9,20],"metadata":{"skip":false,"skipReason":null},"line":173,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1746}
{"testID":21,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1757}
{"test":{"id":22,"name":"TraderStrategy Model Tests JSON Serialization fromJson should parse DateTime fields correctly","suiteID":0,"groupIDs":[8,9,20],"metadata":{"skip":false,"skipReason":null},"line":187,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1758}
{"testID":22,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1760}
{"test":{"id":23,"name":"TraderStrategy Model Tests JSON Serialization fromJson should handle List<String> for preferredAssets","suiteID":0,"groupIDs":[8,9,20],"metadata":{"skip":false,"skipReason":null},"line":193,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1760}
{"testID":23,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1763}
{"test":{"id":24,"name":"TraderStrategy Model Tests JSON Serialization fromJson should handle Map for performanceMetrics","suiteID":0,"groupIDs":[8,9,20],"metadata":{"skip":false,"skipReason":null},"line":199,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1763}
{"testID":24,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1765}
{"test":{"id":25,"name":"TraderStrategy Model Tests JSON Serialization fromJson should handle null profileImageUrl","suiteID":0,"groupIDs":[8,9,20],"metadata":{"skip":false,"skipReason":null},"line":205,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1766}
{"testID":25,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1768}
{"test":{"id":26,"name":"TraderStrategy Model Tests JSON Serialization fromJson should convert numeric fields to correct types","suiteID":0,"groupIDs":[8,9,20],"metadata":{"skip":false,"skipReason":null},"line":213,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1768}
{"testID":26,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1772}
{"test":{"id":27,"name":"TraderStrategy Model Tests JSON Serialization toJson should create correct JSON representation","suiteID":0,"groupIDs":[8,9,20],"metadata":{"skip":false,"skipReason":null},"line":225,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1772}
{"testID":27,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1774}
{"test":{"id":28,"name":"TraderStrategy Model Tests JSON Serialization JSON round-trip should preserve data","suiteID":0,"groupIDs":[8,9,20],"metadata":{"skip":false,"skipReason":null},"line":239,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1774}
{"testID":28,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1776}
{"group":{"id":29,"suiteID":0,"parentID":9,"name":"TraderStrategy Model Tests Trading Style Validation","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":253,"column":5,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"group","time":1776}
{"test":{"id":30,"name":"TraderStrategy Model Tests Trading Style Validation should accept valid trading styles","suiteID":0,"groupIDs":[8,9,29],"metadata":{"skip":false,"skipReason":null},"line":254,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1776}
{"testID":30,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1778}
{"test":{"id":31,"name":"TraderStrategy Model Tests Trading Style Validation should handle custom trading styles","suiteID":0,"groupIDs":[8,9,29],"metadata":{"skip":false,"skipReason":null},"line":263,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1778}
{"testID":31,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1779}
{"group":{"id":32,"suiteID":0,"parentID":9,"name":"TraderStrategy Model Tests Performance Metrics Validation","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":269,"column":5,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"group","time":1779}
{"test":{"id":33,"name":"TraderStrategy Model Tests Performance Metrics Validation should validate win rate boundaries","suiteID":0,"groupIDs":[8,9,32],"metadata":{"skip":false,"skipReason":null},"line":270,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1779}
{"testID":33,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1781}
{"test":{"id":34,"name":"TraderStrategy Model Tests Performance Metrics Validation should handle extreme win rates","suiteID":0,"groupIDs":[8,9,32],"metadata":{"skip":false,"skipReason":null},"line":276,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1781}
{"testID":34,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1784}
{"test":{"id":35,"name":"TraderStrategy Model Tests Performance Metrics Validation should validate consistency between total and individual trades","suiteID":0,"groupIDs":[8,9,32],"metadata":{"skip":false,"skipReason":null},"line":284,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1784}
{"testID":35,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1787}
{"group":{"id":36,"suiteID":0,"parentID":9,"name":"TraderStrategy Model Tests Edge Cases","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":290,"column":5,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"group","time":1788}
{"test":{"id":37,"name":"TraderStrategy Model Tests Edge Cases should handle zero trades scenario","suiteID":0,"groupIDs":[8,9,36],"metadata":{"skip":false,"skipReason":null},"line":291,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1788}
{"testID":37,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1790}
{"test":{"id":38,"name":"TraderStrategy Model Tests Edge Cases should handle extreme values","suiteID":0,"groupIDs":[8,9,36],"metadata":{"skip":false,"skipReason":null},"line":322,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1790}
{"testID":38,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1796}
{"test":{"id":39,"name":"TraderStrategy Model Tests Edge Cases should handle inactive strategies","suiteID":0,"groupIDs":[8,9,36],"metadata":{"skip":false,"skipReason":null},"line":353,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1796}
{"testID":39,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1798}
{"test":{"id":40,"name":"TraderStrategy Model Tests Edge Cases should handle empty preferred assets","suiteID":0,"groupIDs":[8,9,36],"metadata":{"skip":false,"skipReason":null},"line":358,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1798}
{"testID":40,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1800}
{"group":{"id":41,"suiteID":0,"parentID":9,"name":"TraderStrategy Model Tests Error Handling","metadata":{"skip":false,"skipReason":null},"testCount":4,"line":388,"column":5,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"group","time":1800}
{"test":{"id":42,"name":"TraderStrategy Model Tests Error Handling fromJson should throw when required fields are missing","suiteID":0,"groupIDs":[8,9,41],"metadata":{"skip":false,"skipReason":null},"line":389,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1800}
{"testID":42,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1814}
{"test":{"id":43,"name":"TraderStrategy Model Tests Error Handling fromJson should throw on invalid DateTime format","suiteID":0,"groupIDs":[8,9,41],"metadata":{"skip":false,"skipReason":null},"line":399,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1815}
{"testID":43,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1816}
{"test":{"id":44,"name":"TraderStrategy Model Tests Error Handling fromJson should throw on null required fields","suiteID":0,"groupIDs":[8,9,41],"metadata":{"skip":false,"skipReason":null},"line":406,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1817}
{"testID":44,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1818}
{"test":{"id":45,"name":"TraderStrategy Model Tests Error Handling fromJson should handle malformed preferredAssets","suiteID":0,"groupIDs":[8,9,41],"metadata":{"skip":false,"skipReason":null},"line":413,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1818}
{"testID":45,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1820}
{"group":{"id":46,"suiteID":0,"parentID":9,"name":"TraderStrategy Model Tests Business Logic Validation","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":421,"column":5,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"group","time":1820}
{"test":{"id":47,"name":"TraderStrategy Model Tests Business Logic Validation should identify high-performance strategies","suiteID":0,"groupIDs":[8,9,46],"metadata":{"skip":false,"skipReason":null},"line":422,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1820}
{"testID":47,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1821}
{"test":{"id":48,"name":"TraderStrategy Model Tests Business Logic Validation should identify risky strategies","suiteID":0,"groupIDs":[8,9,46],"metadata":{"skip":false,"skipReason":null},"line":430,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1822}
{"testID":48,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1823}
{"test":{"id":49,"name":"TraderStrategy Model Tests Business Logic Validation should validate follower count consistency","suiteID":0,"groupIDs":[8,9,46],"metadata":{"skip":false,"skipReason":null},"line":461,"column":7,"url":"file:///Users/jung-wankim/Project/trader-app/test/unit/models/trader_strategy_test.dart"},"type":"testStart","time":1823}
{"testID":49,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1824}
test/unit/models/video_model_test.dart:403:49: Error: A '$' has special meaning inside a string, and must be followed by an identifier or an expression in curly braces ({}).
Try adding a backslash (\) to escape the '$'.
          description: 'Special chars: éñ中文🎵@#$%^&*()',
                                                ^
{"testID":5,"error":"Failed to load \"/Users/jung-wankim/Project/trader-app/test/unit/models/video_model_test.dart\":\nCompilation failed for testPath=/Users/jung-wankim/Project/trader-app/test/unit/models/video_model_test.dart: test/unit/models/video_model_test.dart:403:49: Error: A '$' has special meaning inside a string, and must be followed by an identifier or an expression in curly braces ({}).\nTry adding a backslash (\\) to escape the '$'.\n          description: 'Special chars: éñ中文🎵@#$%^&*()',\n                                                ^\n.","stackTrace":"","isFailure":false,"type":"error","time":2275}
{"testID":5,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":2275}
test/unit/models/stock_recommendation_test.dart:66:48: Error: Undefined name 'isInfinite'.
        expect(recommendation.potentialProfit, isInfinite);
                                               ^^^^^^^^^^
test/unit/models/stock_recommendation_test.dart:80:48: Error: Undefined name 'isInfinite'.
        expect(recommendation.riskRewardRatio, isInfinite);
                                               ^^^^^^^^^^
{"testID":7,"error":"Failed to load \"/Users/jung-wankim/Project/trader-app/test/unit/models/stock_recommendation_test.dart\":\nCompilation failed for testPath=/Users/jung-wankim/Project/trader-app/test/unit/models/stock_recommendation_test.dart: test/unit/models/stock_recommendation_test.dart:66:48: Error: Undefined name 'isInfinite'.\n        expect(recommendation.potentialProfit, isInfinite);\n                                               ^^^^^^^^^^\ntest/unit/models/stock_recommendation_test.dart:80:48: Error: Undefined name 'isInfinite'.\n        expect(recommendation.riskRewardRatio, isInfinite);\n                                               ^^^^^^^^^^\n.","stackTrace":"","isFailure":false,"type":"error","time":3073}
{"testID":7,"result":"error","skipped":false,"hidden":false,"type":"testDone","time":3073}
{"success":false,"type":"done","time":3074}
